@ /video root:video {
  #%graph.comment Two shaders from GLSL sandbox\ncomposited with some simple geometry (thanks Max D!)
  #%graph.colors Red
  #%praxis.version 5.0.0-beta-1
  .renderer OpenGL
  .width 800
  .height 600
  .fps 60.0
  @ ./output-1 video:output {
    #%graph.x 705
    #%graph.y 258
  }
  @ ./gl-source1 video:gl:p2d {
    #%graph.x 214
    #%graph.y 99
    .code "

    @P(1)
    @Type.Number(min = 0, max = 1, def = 0.5)
    double x;
    @P(2)
    @Type.Number(min = 0, max = 1, def = 0.5)
    double y;

    @Inject
    Property time;

    void updateUniforms() \{
        if (!time.isAnimating()) \{
            time.set(0).to(86400).in(86400);
        \}
        shader.set(\"time\", d(time));
        shader.set(\"mouse\", x, y);
    \}

    // BOILERPLATE BELOW
    @P(0)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEF_FRAG)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;
    
    final String DEF_FRAG
            = \"uniform float time;\\n\"
            + \"uniform vec2 mouse;\\n\"
            + \"uniform vec2 resolution;\\n\\n\"
            + \"void main() \{\\n\"
            + \"  // fragment position\\n\"
            + \"  vec2 pos = gl_FragCoord.xy/resolution.xy;\\n\"
            + \"  vec2 m = mouse * 2.0;\\n\"
            + \"  gl_FragColor = vec4(m.x * pos.x, m.y * pos.y, 1.0 - (m.x * pos.y),1.0);\\n\"
            + \"\}\";

    @Override
    public void setup() \{
        updateShader();
        noStroke();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER,
                    fragment.isEmpty() ? DEF_FRAG : fragment);
        \}
        shader(shader);
        updateUniforms();
        rect(0, 0, width, height);
        resetShader();
    \}

    void updateShader() \{
        shader = null;
    \}

"
    .fragment "#ifdef GL_ES
precision mediump float;
#endif


//Simple 3D effect using the y component of the clipspace position for the depth.

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

float pi = acos(0.0) * 1.0;

mat2 rotate2d(float _angle)\{
    return mat2(cos(_angle),sin(_angle),
                sin(_angle),-cos(_angle));
\}

vec2 getWorldSpacePosition(vec2 uv, out float depth)
\{	
	float rotationAngle = radians(time * 20.);
	float height = 1.0;
	
	uv.y += .55;
	depth = uv.y;
	uv = (uv * 2.0 - 1.0) / (1.0 - depth);
	uv = rotate2d(rotationAngle) * uv;
	return (cos(uv * 2.0 * pi) * 0.5 + 0.5);
\}

vec3 getColor(vec2 uv, float depth)
\{
	vec3 color = vec3(uv.y*2. + uv.x*uv.x*1.5);
	return floor(color) * sqrt(0.96 - depth);
\}

void main( void ) 
\{
	float depth = 0.0;
	vec2 uv = getWorldSpacePosition( gl_FragCoord.xy / resolution.x, depth);
	vec3 color = getColor(uv, depth);
	gl_FragColor = vec4(color, 1.0);
\}"
  }
  @ ./cubesphere video:gl:p3d {
    #%graph.x 214
    #%graph.y 411
    .code "

    @Override
    public void draw() \{
        
        directionalLight(126, 126, 126, 0, 0, -1);
        ambientLight(255, 102, 50);
        
        translate(width/2, height/2, 0);
        rotateY(millis() * -0.001);
        
        // cube
        noFill();
        stroke(255);
        strokeWeight(10);
        box(width/2);
        
        // spheres
        fill(255);
        noStroke();
        double dist = sin(millis() * 0.002)*width/3;
        pushMatrix();
        translate(dist, 0, 0);
        sphere(width/10);
        popMatrix();
        pushMatrix();
        translate(-dist, 0, 0);
        sphere(width/10);
        popMatrix();
    \}
"
  }
  @ ./composite-1 video:composite {
    #%graph.x 483
    #%graph.y 196
    .mode Difference
    .force-alpha true
  }
  @ ./noise-warp video:gl:p3d {
    #%graph.x 214
    #%graph.y 234
    .code "

    @P(1) @Type.Number(min = 0, max = 1, def = 0.1)
    double amplitude;
    @P(2) @Type.Number(min = 0, max = 1, def = 0.1)
    double speed;
    @P(3) @Type.Number(min = 0, max = 5, def = 2)
    double frequency;
    @P(100)
    Property _time;
    
    void updateUniforms() \{
        if (!_time.isAnimating()) \{
            _time.set(0).to(86400).in(86400);
        \}
        shader.set(\"time\", d(_time));
        shader.set(\"amplitude\", amplitude);
        shader.set(\"speed\", speed);
        shader.set(\"frequency\", frequency);
    \}

    
    // BOILERPLATE BELOW
    @In(0)
    PImage in;
    @P(0)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEFAULT_FRAGMENT_SHADER)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;

    @Override
    public void setup() \{
        updateShader();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER,
                    fragment.isEmpty() ? DEFAULT_FRAGMENT_SHADER : fragment);
        \}
        shader(shader);
        updateUniforms();
        image(in, 0, 0);
        resetShader();
    \}

    void updateShader() \{
        shader = null;
    \}

"
    .fragment "
varying vec4 vertTexCoord;
uniform sampler2D texture;
uniform float time;
uniform float amplitude;
uniform float speed;
uniform float frequency;

            //
            // Description : Array and textureless GLSL 2D/3D/4D simplex
            // noise functions.
            // Author : Ian McEwan, Ashima Arts.
            // Maintainer : ijm
            // Lastmod : 20110822 (ijm)
            // License : Copyright (C) 2011 Ashima Arts. All rights reserved.
            // Distributed under the MIT License. See LICENSE file.
            // https://github.com/ashima/webgl-noise
            //

            vec3 mod289(vec3 x) \{
             return x - floor(x * (1.0 / 289.0)) * 289.0;
            \}

            vec4 mod289(vec4 x) \{
             return x - floor(x * (1.0 / 289.0)) * 289.0;
            \}

            vec4 permute(vec4 x) \{
             return mod289(((x*34.0)+1.0)*x);
            \}

            vec4 taylorInvSqrt(vec4 r)
            \{
                return 1.79284291400159 - 0.85373472095314 * r;
            \}
                                             
            float snoise(vec3 v)
            \{
                const vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
                const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
                
                // First corner
                vec3 i = floor(v + dot(v, C.yyy) );
                vec3 x0 = v - i + dot(i, C.xxx) ;
                
                // Other corners
                vec3 g = step(x0.yzx, x0.xyz);
                vec3 l = 1.0 - g;
                vec3 i1 = min( g.xyz, l.zxy );
                vec3 i2 = max( g.xyz, l.zxy );
                
                // x0 = x0 - 0.0 + 0.0 * C.xxx;
                // x1 = x0 - i1 + 1.0 * C.xxx;
                // x2 = x0 - i2 + 2.0 * C.xxx;
                // x3 = x0 - 1.0 + 3.0 * C.xxx;
                vec3 x1 = x0 - i1 + C.xxx;
                vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
                vec3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y
                
                // Permutations
                i = mod289(i);
                vec4 p = permute( permute( permute(
                                                   i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
                                          + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
                                 + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
                
                // Gradients: 7x7 points over a square, mapped onto an octahedron.
                // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
                float n_ = 0.142857142857; // 1.0/7.0
                vec3 ns = n_ * D.wyz - D.xzx;
                
                vec4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p,7*7)
                
                vec4 x_ = floor(j * ns.z);
                vec4 y_ = floor(j - 7.0 * x_ ); // mod(j,N)
                
                vec4 x = x_ *ns.x + ns.yyyy;
                vec4 y = y_ *ns.x + ns.yyyy;
                vec4 h = 1.0 - abs(x) - abs(y);
                
                vec4 b0 = vec4( x.xy, y.xy );
                vec4 b1 = vec4( x.zw, y.zw );
                
                //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
                //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
                vec4 s0 = floor(b0)*2.0 + 1.0;
                vec4 s1 = floor(b1)*2.0 + 1.0;
                vec4 sh = -step(h, vec4(0.0));
                
                vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
                vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
                
                vec3 p0 = vec3(a0.xy,h.x);
                vec3 p1 = vec3(a0.zw,h.y);
                vec3 p2 = vec3(a1.xy,h.z);
                vec3 p3 = vec3(a1.zw,h.w);
                
                //Normalise gradients
                vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
                p0 *= norm.x;
                p1 *= norm.y;
                p2 *= norm.z;
                p3 *= norm.w;
                
                // Mix final noise value
                vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
                m = m * m;
                return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                             dot(p2,x2), dot(p3,x3) ) );
            \}
            // end of noise functions
                                         
            void main()
            \{
                vec2 texCoords = vertTexCoord.st + vec2(
                    amplitude * (snoise(vec3(frequency * vertTexCoord.st.s, frequency * vertTexCoord.st.t, speed * time))),
                    amplitude * (snoise(vec3(frequency * vertTexCoord.st.s + 17.0, frequency * vertTexCoord.st.t, speed * time)))
                );
                vec2 pos = 0.5 - vertTexCoord.st;  
                gl_FragColor = texture2D(texture, texCoords); 
            \}"
    .amplitude 0.25
    .speed 0.6
    .frequency 1.1
  }
  @ ./gl-source2 video:gl:p2d {
    #%graph.x 28
    #%graph.y 196
    .code "

    @P(1)
    @Type.Number(min = 0, max = 1, def = 0.5)
    double x;
    @P(2)
    @Type.Number(min = 0, max = 1, def = 0.5)
    double y;

    @Inject
    Property time;

    void updateUniforms() \{
        if (!time.isAnimating()) \{
            time.set(0).to(86400).in(86400);
        \}
        shader.set(\"time\", d(time));
        shader.set(\"mouse\", x, y);
    \}

    // BOILERPLATE BELOW
    @P(0)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEF_FRAG)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;
    
    final String DEF_FRAG
            = \"uniform float time;\\n\"
            + \"uniform vec2 mouse;\\n\"
            + \"uniform vec2 resolution;\\n\\n\"
            + \"void main() \{\\n\"
            + \"  // fragment position\\n\"
            + \"  vec2 pos = gl_FragCoord.xy/resolution.xy;\\n\"
            + \"  vec2 m = mouse * 2.0;\\n\"
            + \"  gl_FragColor = vec4(m.x * pos.x, m.y * pos.y, 1.0 - (m.x * pos.y),1.0);\\n\"
            + \"\}\";

    @Override
    public void setup() \{
        updateShader();
        noStroke();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER,
                    fragment.isEmpty() ? DEF_FRAG : fragment);
        \}
        shader(shader);
        updateUniforms();
        rect(0, 0, width, height);
        resetShader();
    \}

    void updateShader() \{
        shader = null;
    \}

"
    .fragment "// Lightning
// By: Brandon Fogerty
// bfogerty at gmail dot com 
// xdpixel.com

//MODS BY 27

#ifdef GL_ES
precision lowp float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;


float Hash( vec2 p)
\{
     vec3 p2 = vec3(p.xy,1.0);
    return fract(sin(dot(p2,vec3(37.1,61.7, 12.4)))*3758.5453123);
\}

float noise(in vec2 p)
\{
    vec2 i = floor(p);
     vec2 f = fract(p);
     f *= f * (3.0-2.0*f);

    return mix(mix(Hash(i + vec2(0.,0.)), Hash(i + vec2(1.,0.)),f.x),
               mix(Hash(i + vec2(0.,1.)), Hash(i + vec2(1.,1.)),f.x),
               f.y);
\}

float fbm(vec2 p)
\{
     float v = 0.0;
     v += noise(p*1.0)*.5;
     v += noise(p*2.)*.25;
     v += noise(p*4.)*.125;
     return v;
\}

void main( void ) 
\{

	vec2 uv = ( gl_FragCoord.xy / resolution.xy ) * 2.0 - 1.0;
	uv.x *= resolution.x/resolution.y;
	uv -= mouse;
	
	
	
	float timeVal = time;
	vec3 finalColor = vec3( 0.0 );
	for( int i=1; i < 10; ++i )
	\{
		float indexAsFloat = float(i);
		float amp = 40.0 + (indexAsFloat*5.0);
		float period = 2.0 + (indexAsFloat+2.0);
		float thickness = mix( 0.7, 1.0, noise(uv*10.0) );
		float t = abs( 1.0 / (sin(uv.x + fbm( uv + timeVal/float(i) * period/float(i) )) * amp) * thickness );
		float show = fract(abs(sin(timeVal))) >= 0.9 ? 1.0 : 0.0;
		show = 1.0;
		finalColor +=  t * vec3( 0.3, 0.5, 2.0 ) * show;
	\}
	
	gl_FragColor = vec4( finalColor, 1.0 );

\}"
  }
  ~ ./cubesphere!out ./composite-1!src
  ~ ./gl-source1!out ./composite-1!in
  ~ ./noise-warp!out ./composite-1!in
  ~ ./composite-1!out ./output-1!in
  ~ ./gl-source2!out ./noise-warp!in
}
